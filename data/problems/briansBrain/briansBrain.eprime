language ESSENCE' 1.0

given nbDim, nbTime : int

letting PDIM be int(-1..nbDim+2)                $ padded by 2
letting DIM  be int(1..nbDim)
letting TIME be int(1..nbTime)

find l : matrix indexed by [TIME, PDIM, PDIM] of int(0..2)          $ 0 is dead
                                                                    $ 1 is dying
                                                                    $ 2 is alive

maximising sum([ l[1,i,j] = 2 | i,j : DIM ])

such that

    $ padded parts are always dead
    forall t : TIME . forall i, j : PDIM .
        (!(i in DIM /\ j in DIM)) -> l[t,i,j] = 0,

    $ any two layers not equal
    forall t : TIME . forall t2 : int(t+1..nbTime) .
        exists i,j : DIM . l[t,i,j] != l[t2,i,j],

    $ first layer lex less than all other layers
    forall t : int(2..nbTime) .
        flatten(l[1,..,..]) <lex flatten(l[t,..,..]),

    $ symmetry breaking on first layer
    
    [ l[1,i,j] | i, j : DIM ] <=lex [ l[1,i2,j2]
                                    | i, j : DIM
                                    , i2 : int(nbDim+1- i)
                                    , j2 : int(j)
                                    ],

    [ l[1,i,j] | i, j : DIM ] <=lex [ l[1,i2,j2]
                                    | i, j : DIM
                                    , i2 : int(i)
                                    , j2 : int(nbDim+1- j)
                                    ],

    [ l[1,i,j] | i, j : DIM ] <=lex [ l[1,i2,j2]
                                    | i, j : DIM
                                    , i2 : int(nbDim+1- i)
                                    , j2 : int(nbDim+1- j)
                                    ],

    [ l[1,i,j] | i, j : DIM ] <=lex [ l[1,i2,j2]
                                    | i, j : DIM
                                    , i2 : int(j)
                                    , j2 : int(i)
                                    ],

    [ l[1,i,j] | i, j : DIM ] <=lex [ l[1,i2,j2]
                                    | i, j : DIM
                                    , i2 : int(nbDim+1- j)
                                    , j2 : int(i)
                                    ],

    [ l[1,i,j] | i, j : DIM ] <=lex [ l[1,i2,j2]
                                    | i, j : DIM
                                    , i2 : int(j)
                                    , j2 : int(nbDim+1- i)
                                    ],

    [ l[1,i,j] | i, j : DIM ] <=lex [ l[1,i2,j2]
                                    | i, j : DIM
                                    , i2 : int(nbDim+1- j)
                                    , j2 : int(nbDim+1- i)
                                    ],

    forall t : int(1..nbTime) . forall i, j : int(0..nbDim+1) .
        exists tplus1 : int( ((t%nbTime)+1) ) .
        makeTable(and(
            [
                $ In each time step, a cell turns on if it was off but had exactly two neighbors that were on,
                (l[t,i,j] = 0) /\
                (sum([ l[t,i-1,j-1] = 2, l[t,i-1,j] = 2, l[t,i-1,j+1] = 2
                     , l[t,i  ,j-1] = 2,                 l[t,i  ,j+1] = 2
                     , l[t,i+1,j-1] = 2, l[t,i+1,j] = 2, l[t,i+1,j+1] = 2
                     ]) = 2)
                <-> l[tplus1,i,j] = 2
            ,
                $ dead stay dead unless they have 2 alive neighbors
                (l[t,i,j] = 0) /\
                (sum([ l[t,i-1,j-1] = 2, l[t,i-1,j] = 2, l[t,i-1,j+1] = 2
                     , l[t,i  ,j-1] = 2,                 l[t,i  ,j+1] = 2
                     , l[t,i+1,j-1] = 2, l[t,i+1,j] = 2, l[t,i+1,j+1] = 2
                     ]) != 2)
                -> l[tplus1,i,j] = 0
            ,
                $ All cells that were "on" go into the "dying" state
                l[t,i,j] = 2 <-> l[tplus1,i,j] = 1
            ,
                $ Cells that were in the dying state go into the off state.
                l[t,i,j] = 1 -> l[tplus1,i,j] = 0
            ])),

    true
